---
layout: post
title:  "RRDtool"
date:   2020-02-20 23:51:19 +0900
categories: rrd
---
## RRDtool(Round-Robin Database tool)

#### 개요
cpu 부하량, 온도, 네트워크 대역폭 등과 같이 일정 시간 간격으로 나열가능한 데이터들(시계열 데이터)을 다루는 것을 목표로 한 데이터 베이스다. 순환 버퍼 기반의 데이터베이스이므로 시간이 흘러도 일정한 용량을 유지한다.

전반적인 내용이 [솔라나라(https://www.solanara.net/solanara/rrdtool)](https://www.solanara.net/solanara/rrdtool)에 잘 정리 되어있으니 참조하자.

rrd 파일을 생성하고 데이터를 입력하고 출력하는 순서로 정리하며 필요한 개념들을 몇가지 정리해보자.
<br/>
<br/>
#### 1. rrd 파일 생성하기

관계형 데이터베이스에서 데이터를 저장하기 위해 테이블을 생성하듯이 우선 rrd 파일을 생성해야 한다.
원하는 값을 출력하기 위해선 데이터 구조를 잘 정의해야 하는데, 그러기 위해선 아래의 몇가지 사항을 이해하고 넘어가야한다.(실제로 회사에서 일할 때 데이터 구조를 잘못 정의하는 바람에 출력값이 안드로메다로 향하는 모습을 봤었다.)

```
 rrdtool create filename [--start|-b start time]
                [--step|-s step]
                [--template|-t template-file]
                [--source|-r source-file]
                [--no-overwrite|-O]
                [--daemon|-d address]
                [DS:ds-name:DST:dst arguments]
                [RRA:CF:cf arguments]
```

**step(--step 또는 -s)**<br>
데이터가 입력될 주기를 설정한다. 예를 들어 5분마다 cpu 부하량을 저장하려면 300 을 설정한다.

**start time(--start 또는 -b)**<br>
데이터가 시작되는 시간을 설정한다. 시작 시간보다 이르거나 같은 시간의 데이터는 저장되지 않는다.

**DS**<br>
하나의 rrd에는 하나 이상의 데이터 소스(**D**ata**S**ource)를 저장할 수 있다. 예를들어 인바운드/아웃바운드 트래픽을 하나의 RRD에 저장을 한다던지, 메모리 사용량/여유량을 하나의 RRD에 저장하는 방식이다. 별개의 RRD로 만들어도 되지만 그렇게 되면 차 후 데이터 출력에 사용되는 명령이 조금 더 복잡해진다. 이 데이터 소스를 정의하기 위해선 몇가지 파라미터들이 필요하다.
   1. ds-name : 데이터 소스의 이름을 지정한다. 최대 19자의 영문,숫자,언더스코어\[a-zA-Z0-9_\]를 사용할 수 있다.
   2. DST : 데이터 소스의 타입(**D**ata **S**ource **T**ype)을 지정한다. 이 타입을 어떻게 설정하느냐에 따라 엉뚱한 결과값을 출력할 수 있으니 주의가 필요하다.
        ```
            1) GAUGE - 입력되는 데이터가 한 단위 앞에 저장된 값과 무관한, 현재의 값을 나타낼 때 사용한다. 예를들어 cpu 부하량을 주기별로 파악하고 싶은 경우에 해당한다.
            2) COUNTER - 입력되는 데이터가 연속적으로 증가되는 값일 때 각 주기별로 증가분을 파악하기 위해 사용한다. 감소하는 경우는 없다고 가정한다. 예를들어 네트워크 인바운드/아웃바운드 트래픽을 주기별 사용량으로 파악하고 싶을 때 현재 step의 값과 이전 step의 값의 차이를 계산해보면 되는데, 이 때 사용할 수 있는 타입이 COUNTER이다.
            3) DERIVE - COUNTER와 달리 입력되는 데이터가 증감되는 값일 때 각 주기별로 증감분을 파악하기 위해 사용한다.
            4) DCOUNTER - COUNTER와 동일하나 부동소수점을 지원한다.
            5) DDERIVE - DERIVE와 동일하나 부동소수점을 지원한다.
            6) ABSOLUTE - 증감분을 직접 입력하는 경우에 사용한다.
            7) COMPUTE - rpn 표현식에 의해 계산된 값을 저장할 때 사용한다.
        ```
   3. dst arguments : DST에 따라 두가지로 나뉜다.
        - GAUGE, COUNTER, DERIVE, DCOUNTER, DDERIVE, ABSOLUTE 인 경우
            ```
                DS:ds-name:DST:heartbeat:min:max
                1) heartbeat : 
                2) min :
                3) max :
            ```
        - COMPUTE인 경우
            ```
                DS:ds-name:DST:RPN-EXPRESSION
                RPN-EXPRESSION : 후위 표기법.
            ```

**RRA**
CF
cf arguments

